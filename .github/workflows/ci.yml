name: ci
on: [push, pull_request]
jobs:
  test_freebsd:
    name: Tests/FreeBSD test suite
    needs: [ min_version, deps ]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-10.15 , features: "dist-client,dist-server" } ## GHA MacOS-11.0 VM won't have VirtualBox; refs: <https://github.com/actions/virtual-environments/issues/4060> , <https://github.com/actions/virtual-environments/pull/4010>
    env:
      mem: 2048
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - name: Prepare, build and test
      ## spell-checker:ignore (ToDO) sshfs usesh vmactions
      uses: vmactions/freebsd-vm@v0.1.6
      with:
        usesh: true
        # sync: sshfs
        prepare: pkg install -y curl gmake sudo
        run: |
          ## Prepare, build, and test
          # implementation modelled after ref: <https://github.com/rust-lang/rustup/pull/2783>
          # * NOTE: All steps need to be run in this block, otherwise, we are operating back on the mac host
          set -e
          #
          TEST_USER=tester
          REPO_NAME=${GITHUB_WORKSPACE##*/}
          WORKSPACE_PARENT="/Users/runner/work/${REPO_NAME}"
          WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"
          #
          pw adduser -n ${TEST_USER} -d /root/ -g wheel -c "Coreutils user to build" -w random
          # chown -R ${TEST_USER}:wheel /root/ "${WORKSPACE_PARENT}"/
          chown -R ${TEST_USER}:wheel /root/ "/Users/runner/work/${REPO_NAME}"/
          whoami
          #
          # Further work needs to be done in a sudo as we are changing users
          sudo -i -u ${TEST_USER} sh << EOF
          set -e
          whoami
          curl https://sh.rustup.rs -sSf --output rustup.sh
          sh rustup.sh -y --profile=minimal
          . $HOME/.cargo/env
          ## Info
          # environment
          echo "## environment"
          echo "CI='${CI}'"
          echo "REPO_NAME='${REPO_NAME}'"
          echo "TEST_USER='${TEST_USER}'"
          echo "WORKSPACE_PARENT='${WORKSPACE_PARENT}'"
          echo "WORKSPACE='${WORKSPACE}'"
          env | sort
          # tooling info
          echo "## tooling info"
          cargo -V
          rustc -V
          #
          cd "${WORKSPACE}"
          unset FAULT
          cargo build --features "${{ matrix.job.features }}" || FAULT=1
          cargo test --features "${{ matrix.job.features }}" || FAULT=1
          # Clean to avoid to rsync back the files
          cargo clean
          if (test -n "$FAULT"); then exit 1 ; fi
          EOF

